procedure draw_square { M p }
{
getx mx M
gety my M

expression ax {mx - p}
expression ay {my - p}
point A  ax ay

expression bx {mx + p}
expression by {my - p}
point B  bx by


expression cx {mx - p}
expression cy {my + p}
point C  cx cy

expression dx {mx + p}
expression dy {my + p}
point D  dx dy

drawsegment A B
drawsegment A C
drawsegment C D
drawsegment B D

random r
expression r {r*256}
random g
expression g {g*256}
random b
expression b {b*256}

color r g b 
fillrectangle A D
}

procedure draw_rectangle { M p}
{
getx mx M
gety my M

expression ax {mx - 1.2*p}
expression ay {my - p}
point A  ax ay

expression bx {mx + 1.2*p}
expression by {my - p}
point B  bx by


expression cx {mx - 1.2*p}
expression cy {my + p}
point C  cx cy

expression dx {mx + 1.2*p}
expression dy {my + p}
point D  dx dy

drawsegment A B
drawsegment A C
drawsegment C D
drawsegment B D

random r
expression r {r*256}
random g
expression g {g*256}
random b
expression b {b*256}

color r g b 
fillrectangle A D
}

procedure draw_triangle { M p}
{
getx mx M
gety my M

expression ax {mx - p}
expression ay {my - p}
point A  ax ay

expression bx {mx + p}
expression by {my - p}
point B  bx by


expression cx {mx }
expression cy {my + p}
point C  cx cy

drawsegment A B
drawsegment A C
drawsegment B C

random r
expression r {r*256}
random g
expression g {g*256}
random b
expression b {b*256}

color r g b 
filltriangle A B C

}

procedure draw_circle { M p}
{
getx mx M
gety my M

expression ax {mx }
expression ay {my }
point A  ax ay

expression bx {mx + p}
expression by {my }
point B  bx by

circle C A B

random r
expression r {r*256}
random g
expression g {g*256}
random b
expression b {b*256}

color r g b 
fillcircle C

}

procedure draw_random_shape { S p }
{
random o
if_then_else {o < 0.25}
{
call draw_square {S p}
}{ }

if_then_else {o > 0.25 && o < 0.5}
{
call draw_rectangle {S p}
}{ }

 if_then_else {o > 0.5 && o < 0.75}
{
call draw_triangle {S p}
}{ }

if_then_else {o > 0.75 && o < 1.0}
{
call draw_circle {S p}
}{ }
}

procedure draw_line_on_x_coord {A p}
{
getx x A
gety y A
expression n {0}

while { n < 9 }{

point S x y 
call draw_random_shape {S p}

expression y {y + 5}
expression n {n + 1}
}

}

procedure plotting {A p n_out fx counter }
{
while {n_out < 13}
{
if_then_else {fx > counter}
{

call draw_line_on_x_coord {A p }

expression counter {counter + 3}
}
{}

getx x A
gety y A
expression x {x + 5}
point A x y
expression n_out {n_out + 1}
}
}

% Koordinatni sistem
color 200 100 245
point B 50 50
%cmark_lt B
point C 10 50
%cmark_lt C
line lbc  C B
drawline lbc

point D 70 60
%cmark_lt D
point E 70 20
%cmark_lt E
line lde E D
drawline lde
%----------------

%Pozadina slike
background 100 80 100
%-------------
point F 0 0 100 100
getx fx F
expression p {2}


point A 5 5
%cmark_lt A
expression n_outA {0}
number counterA 0

%-----------------
getx ax A
gety ay A
getx ex E
gety cy C


expression a1x {ex + ax}
point A1 a1x ay
%cmark_lt A1
expression n_outA1 {0}
expression counterA1 {0}

expression a2y {cy + ay}
point A2 ax a2y
%cmark_lt A2
expression n_outA2 {0}
expression counterA2 {0}

expression a3x {ex + ax}
expression a3y {cy + ay}
point A3 a3x a3y
%cmark_lt A3
expression n_outA3 {0}
expression counterA3 {0}


%Pozivanje funkcija za iscrtavanje
%sa razlicitim pocetnim tackama u
%odnosu na postojeci koord sistem
call plotting {A p n_outA fx counterA}
if_then_else {fx >= 5}
{
call plotting {A1 p n_outA1 fx counterA1}
}{}
if_then_else {fx >= 10}
{
call plotting {A2 p n_outA2 fx counterA2}
}{}
if_then_else {fx >=15}
{
call plotting {A3 p n_outA3 fx counterA3}
}{}
animation_frames 80 2


